stages:
  - lint
  - test
  - dockerize

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375

# Cache dependencies between jobs
cache:
  paths:
    - .cache

# Lint stage
golangci-lint:
  stage: lint
  image: golang:1.21-alpine
  before_script:
    - apk add --no-cache git curl
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
  script:
    - golangci-lint run ./...

# Test stage
test:
  stage: test
  image: golang:1.21-alpine
  before_script:
    - apk add --no-cache git
  script:
    - go test -v ./...
    - go test -v -race ./...
    - go test -v -coverprofile=coverage.txt ./...
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.txt

# Docker build template
.dockerize-template:
  stage: dockerize
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      alias: docker
      command: ["--tls=false"]
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - export IMAGE_TAG="${CI_COMMIT_SHA:0:8}"
    - export DOCKER_REPO=vuongtlt13/backup
  script:
    - docker login -u "$CI_DEPLOY_USER" -p "$CI_DEPLOY_PASSWORD" registry.gitlab.com
    - echo "Building image $DOCKER_REPO:$IMAGE_TAG"
    - docker build --cache-from "$DOCKER_REPO:latest" -t "$DOCKER_REPO:$IMAGE_TAG" -t "$DOCKER_REPO:latest" .
    - docker push "$DOCKER_REPO:$IMAGE_TAG"
    - docker push "$DOCKER_REPO:latest"
  only:
    refs:
      - master

# Docker build job
dockerize:app:
  extends: .dockerize-template
